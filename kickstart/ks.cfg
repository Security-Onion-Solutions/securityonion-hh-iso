# Set the firewall to allow SSH
firewall --enabled --port=22:tcp

# Install Mode
install

# Lock the root account
rootpw --lock

# Force this to use the shadow file
auth --useshadow --passalgo=sha512

# Install via Text Mode
text

# Disable firstboot. We don't have a GUI
firstboot --disable

# Set the keyboard
keyboard us

# Set the language
lang en_US

# Turn on SELinux
selinux --enforcing

# No X Windows please
skipx

# Installation logging level
logging --level=info

# Reboot after install
reboot

# System timezone to UTC
timezone --isUtc Etc/UTC

%include /tmp/part-include

%pre

#!/bin/sh
exec < /dev/tty6 > /dev/tty6

# Switch to the tty so we can type stuff
chvt 6

# Get the megarams
mem=$(($(free -m | grep Mem | awk '{print $2}')+2000))

# Set drives to 0 for now
NUMDRIVES=0

# Block device directory
DIR="/sys/block"

# Minimum drive size in GIGABYTES
MINSIZE=40

# Set the root drive to blank for now
ROOTDRIVE=""

# Ask some basic questions

for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd nvme; do
  if [ -d $DIR/$DEV ]; then

    # Find removeable devices so we don't install on them
    REMOVABLE=$(cat $DIR/$DEV/removable)

    if (( $REMOVABLE == 0 )); then
      NUMDRIVES=$((NUMDRIVES+1))
      SIZE=$(cat $DIR/$DEV/size)
      GB=$(($SIZE/2**21))
    fi
  fi
done

# If there is a single drive move forward
if [ $NUMDRIVES -lt 2 ]; then
  for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd nvme; do
    if [ -d $DIR/$DEV ]; then
      REMOVABLE=$(cat $DIR/$DEV/removable)
      if (( $REMOVABLE == 0 )); then
        SIZE=$(cat $DIR/$DEV/size)
        GB=$(($SIZE/2**21))
        if [ $GB -gt $MINSIZE ]; then
          ROOTDRIVE=$DEV
        else
          echo "Not enough space to install Security Onion. You need at least $MINSIZE GB to proceed"
          read drivetoosmall
        fi
      fi
    fi
  done

  ROOTSIZE=$(($GB/3))

  # Set the volume size to 300GB if it's larger than 300GB
  if [ $ROOTSIZE -gt 300 ]; then
    ROOTPART=300
  else
  # If there isn't at least 300GB set it to what is there.
    ROOTPART=$ROOTSIZE
  fi

# Determine if we need to use gpt
  if [ $GB -gt 1900 ]; then
    parted -s /dev/$ROOTDRIVE mklabel gpt
    echo 'zerombr' > /tmp/part-include
    echo -e "clearpart --all --drives=$ROOTDRIVE" >> /tmp/part-include
    echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part biosboot --fstype=biosboot --size=1" >> /tmp/part-include
    echo -e "part /boot --asprimary --fstype=\"xfs\" --size=500 --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part swap --fstype=\"swap\" --recommended --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /tmp --fstype=\"xfs\" --size=1000 --ondisk=$ROOTDRIVE --fsoptions=\"nodev,nosuid,noexec\"" >> /tmp/part-include
    echo -e "part / --fstype=\"xfs\" --ondisk=$ROOTDRIVE --size=$(($ROOTPART*1000))" >> /tmp/part-include
    echo -e "part /nsm --fstype=\"xfs\" --ondisk=$ROOTDRIVE --grow --size=1" >> /tmp/part-include
  else
    echo 'zerombr' > /tmp/part-include
    echo -e "clearpart --all --drives=$ROOTDRIVE --initlabel" >> /tmp/part-include
    echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /boot --asprimary --fstype=\"xfs\" --size=500 --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part swap --fstype=\"swap\" --recommended --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /tmp --fstype=\"xfs\" --size=1000 --ondisk=$ROOTDRIVE --fsoptions=\"nodev,nosuid,noexec\"" >> /tmp/part-include
    echo -e "part / --fstype=\"xfs\" --size=$(($ROOTPART*1000)) --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /nsm --fstype=\"xfs\" --ondisk=$ROOTDRIVE --grow --size=1" >> /tmp/part-include
  fi

else
  echo "Multiple drives detected.  Let's answer some questions."

  #If there's more than one drive we need to make some choices
  NUMDRIVES=0
  while [ -z $ROOTDRIVE ]
  do
    echo -e "Device\tSize"
    for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd ; do
      if [ -d $DIR/$DEV ]; then
        REMOVABLE=$(cat $DIR/$DEV/removable)
        if (( $REMOVABLE == 0 )); then
          NUMDRIVES=$((NUMDRIVES+1))
          SIZE=$(cat $DIR/$DEV/size)
          GB=$(($SIZE/2**21))
          echo -e "$DEV\t$(($SIZE/2**21))GB"
        fi
      fi
    done

  echo "There are $NUMDRIVES available disk(s)"

    echo "Which device would you like to use as the operating system filesystem (must be larger than $MINSIZE GB):"
    read rootchoice
    if [ -d $DIR/$rootchoice ]; then
      REMOVABLE=$(cat $DIR/$rootchoice/removable)
      if (( $REMOVABLE == 0 )); then
        SIZE=$(cat $DIR/$rootchoice/size)
        GB=$(($SIZE/2**21))
        if [ $GB -gt $MINSIZE ]; then
          echo -e "$rootchoice\t$(($SIZE/2**21))GB - OS Drive"
          ROOTDRIVE=$rootchoice
        else
          echo "Available volume does not meet size requirements.  Please provide a volume greater than $MINSIZE GB"
          NUMDRIVES=0
        fi
      else
        echo "That is a removable drive. Please provide a device name for a fixed disk"
        NUMDRIVES=0
      fi
    else
      echo "That device does not exist.  Please pick one of the above listed devices"
      NUMDRIVES=0
    fi
  done
  SAMEDRIVE=""
  NSMDRIVE=""
  while [ -z $SAMEDRIVE ]
  do
    echo "Would you like to use the same device for NSM storage? (yes/no)"
    read SAMEDRIVE
    if [ "$SAMEDRIVE" == "yes" ]; then
      NSMDRIVE=$ROOTDRIVE
      echo -e "$rootchoice\t$(($SIZE/2**21))GB - NSM Drive"
    elif [ "$SAMEDRIVE" == "no" ]; then
      NUMDRIVES=0
      while [ -z $NSMDRIVE ]
      do
        echo -e "Device\tSize"
        for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd ; do
          if [ -d $DIR/$DEV ]; then
            REMOVABLE=$(cat $DIR/$DEV/removable)
            if (( $REMOVABLE == 0 )); then
              NUMDRIVES=$((NUMDRIVES+1))
              SIZE=$(cat $DIR/$DEV/size)
              GB=$(($SIZE/2**21))
              if [ "$DEV" != "$ROOTDRIVE" ]; then
                echo -e "$DEV\t$(($SIZE/2**21))GB"
              fi
            fi
          fi
        done
        echo "Which device would you like to use for NSM storage:"
        read whichnsm
        if [ -d $DIR/$whichnsm ]; then
          REMOVABLE=$(cat $DIR/$whichnsm/removable)
          if (( $REMOVABLE == 0 )); then
            echo -e "$whichnsm\t$(($SIZE/2**21))GB - NSM Drive"
            NSMDRIVE=$whichnsm
            PCAPSIZE=$(cat $DIR/$NSMDRIVE/size)
            PCAPGB=$(($PCAPSIZE/2**21))
          else
            echo "That is a removable drive. Please provide a device name for a fixed disk"
            NUMDRIVES=0
          fi
        else
          echo "That device does not exist.  Please pick one of the above listed devices"
          NUMDRIVES=0
        fi
      done
    else
      SAMEDRIVE=""
    fi
  done
  ROOTRAWSIZE=$(cat $DIR/$ROOTDRIVE/size)
  ROOTGB=$(($ROOTRAWSIZE/2**21))
  if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
    ROOTSIZE=$(($ROOTGB/3))
    if [ $ROOTSIZE -gt 300 ]; then
      ROOTPART=300
    else
      ROOTPART=$ROOTSIZE
    fi
  else
    ROOTPART=$ROOTGB
  fi
  if [ $ROOTGB -gt 1900 ]; then
    parted -s /dev/$ROOTDRIVE mklabel gpt
    echo 'zerombr' > /tmp/part-include
    if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
      echo -e "clearpart --all --drives=$ROOTDRIVE" >> /tmp/part-include
    else
      echo -e "clearpart --all --drives=$ROOTDRIVE,$NSMDRIVE" >> /tmp/part-include
    fi
    if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
      echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> /tmp/part-include
    else
      echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE,$NSMDRIVE" >> /tmp/part-include
    fi
    echo -e "part biosboot --fstype=biosboot --size=1" >> /tmp/part-include
    echo -e "part /boot --asprimary --fstype=\"xfs\" --size=500 --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part swap --fstype=\"swap\" --recommended --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /tmp --fstype=\"xfs\" --size=1000 --ondisk=$ROOTDRIVE --fsoptions=\"nodev,nosuid,noexec\"" >> /tmp/part-include
    if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
      echo -e "part /nsm --fstype=\"xfs\" --ondisk=$NSMDRIVE --grow --size=1" >> /tmp/part-include
      echo -e "part / --fstype=\"xfs\" --ondisk=$ROOTDRIVE --size=$(($ROOTPART*1000))" >> /tmp/part-include
    else
      echo -e "part /nsm --asprimary --fstype=\"xfs\" --ondisk=$NSMDRIVE --grow --size=1" >> /tmp/part-include
      echo -e "part / --fstype=\"xfs\" --ondisk=$ROOTDRIVE --grow --size=1" >> /tmp/part-include
      if [ $PCAPGB -gt 1900 ]; then
        parted -s /dev/$NSMDRIVE mklabel gpt
      fi
    fi
  else
    echo 'zerombr' > /tmp/part-include
    if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
      echo -e "clearpart --all --drives=$ROOTDRIVE --initlabel" >> /tmp/part-include
    else
      echo -e "clearpart --all --drives=$ROOTDRIVE,$NSMDRIVE --initlabel" >> /tmp/part-include
    fi

    echo -e "bootloader --location=mbr --driveorder=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /boot --asprimary --fstype=\"xfs\" --size=500 --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part swap --fstype=\"swap\" --recommended --ondisk=$ROOTDRIVE" >> /tmp/part-include
    echo -e "part /tmp --fstype=\"xfs\" --size=1000 --ondisk=$ROOTDRIVE --fsoptions=\"nodev,nosuid,noexec\"" >> /tmp/part-include
    if [ "$ROOTDRIVE" == "$NSMDRIVE" ]; then
      echo -e "part /nsm --fstype=\"xfs\" --ondisk=$NSMDRIVE --grow --size=1" >> /tmp/part-include
      echo -e "part / --fstype=\"xfs\" --ondisk=$ROOTDRIVE --size=$(($ROOTPART*1000))" >> /tmp/part-include
    else
      echo -e "part /nsm --asprimary --fstype=\"xfs\" --ondisk=$NSMDRIVE --grow --size=1" >> /tmp/part-include
      echo -e "part / --fstype=\"xfs\" --ondisk=$ROOTDRIVE --grow --size=1" >> /tmp/part-include
      if [ $PCAPGB -gt 1900 ]; then
        parted -s /dev/$NSMDRIVE mklabel gpt
      fi
    fi
  fi
fi

install="no"
while [ "$install" != "yes" ]; do
clear


echo "###########################################"
echo "##          ** W A R N I N G **          ##"
echo "##    _______________________________    ##"
echo "##                                       ##"
echo "##  Installing the Security Onion ISO    ##"
echo "## on this device will DESTROY ALL DATA  ##"
echo "##            and partitions!            ##"
echo "##                                       ##"
echo "##      ** ALL DATA WILL BE LOST **      ##"
echo "###########################################"
echo "Do you wish to continue? (Type the entire word "yes" to proceed.) "
read install
done

exec < /dev/tty1 > /dev/tty1
chvt 1
%end

%post --nochroot
mkdir /mnt/sysimage/root/securityonion
mkdir /mnt/sysimage/nsm/dockerimages
cp -Rv /run/install/repo/securityonion/* /mnt/sysimage/root/securityonion/
cp -Rv /run/install/repo/dockerimages/* /mnt/sysimage/nsm/images/

%end

%post
useradd onion && echo onion:0n10nsH@veLyrZ | chpasswd --crypt-method=SHA512
#echo "~/sosetup.sh" >> /home/onion/.bash_profile
#echo "onion   ALL=(ALL) NOPASSWD: /root/securityonion/sosetup" >> /etc/sudoers

# Create setup script
#echo "sudo /root/securityonion/sosetup" >> /home/onion/sosetup.sh
#chmod +x /home/onion/sosetup.sh

# SSHD Banner
touch /etc/ssh/sshd-banner
echo "##########################################" > /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "###   UNAUTHORIZED ACCESS PROHIBITED   ###" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner

# Set the SSHD banner
echo "Banner /etc/ssh/sshd-banner" >> /etc/ssh/sshd_config

exec < /dev/tty6 > /dev/tty6
chvt 6
clear
echo "Initial Install Complete. Press [Enter] to reboot!"
read -p "Initial Install Complete. Press [Enter] to reboot!"

exec < /dev/tty1 > /dev/tty1
chvt 1

%end

%packages --nobase
@core
%end
